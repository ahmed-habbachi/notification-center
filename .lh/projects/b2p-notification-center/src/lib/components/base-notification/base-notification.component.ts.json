{
    "sourceFile": "projects/b2p-notification-center/src/lib/components/base-notification/base-notification.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1681115072007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681115104135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n   @Input() maxLength: number;\r\n   @Input() animate: NotificationAnimationType;\r\n   @Input() item: Notification;\r\n \r\n-  closeIcons = DEFAULT_ICONS.close\r\n+  closeIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.close);\r\n   title: string | SafeHtml;\r\n   content: string | SafeHtml;\r\n \r\n   constructor(\r\n@@ -135,16 +135,16 @@\n   private initNotificationContent(item: string | SafeHtml, key: string): void {\r\n     switch (key) {\r\n       case 'title':\r\n         if (typeof item === 'string') {\r\n-          this.title = item\r\n+          this.title = this.domSanitizer.bypassSecurityTrustHtml(item);\r\n         } else {\r\n           this.title = item;\r\n         }\r\n         break;\r\n       case 'content':\r\n         if (typeof item === 'string') {\r\n-          this.content = item\r\n+          this.content = this.domSanitizer.bypassSecurityTrustHtml(item);\r\n         } else {\r\n           this.title = item;\r\n         }\r\n         break;\r\n"
                },
                {
                    "date": 1681115139446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,17 +85,19 @@\n   @Input() maxLength: number;\r\n   @Input() animate: NotificationAnimationType;\r\n   @Input() item: Notification;\r\n \r\n-  closeIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.close);\r\n+  closeIcons!: SafeHtml;\r\n   title: string | SafeHtml;\r\n   content: string | SafeHtml;\r\n \r\n   constructor(\r\n     private notificationService: NotificationCenterService,\r\n     private domSanitizer: DomSanitizer,\r\n     private cd: ChangeDetectorRef\r\n-  ) { }\r\n+  ) {\r\n+    this.closeIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.close);\r\n+  }\r\n \r\n   ngOnInit(): void {\r\n     if (this.animate) {\r\n       this.item.state = this.animate;\r\n"
                }
            ],
            "date": 1681115072007,
            "name": "Commit-0",
            "content": "import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { DEFAULT_ICONS } from '../../constants/default-icons.const';\r\nimport { NotificationCenterService } from '../../notification-center.service';\r\nimport { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\nimport { NotificationType } from '../../types/notification-type.enum';\r\nimport { Notification } from '../../types/notification.type';\r\n\r\n@Component({\r\n  selector: 'b2p-base-notification',\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('enterLeave', [\r\n\r\n      // Fade\r\n      state('fade', style({ opacity: 1 })),\r\n      transition('* => fade', [\r\n        style({ opacity: 0 }),\r\n        animate('400ms ease-in-out')\r\n      ]),\r\n      state('fadeOut', style({ opacity: 0 })),\r\n      transition('fade => fadeOut', [\r\n        style({ opacity: 1 }),\r\n        animate('300ms ease-in-out')\r\n      ]),\r\n\r\n      // Enter from top\r\n      state('fromTop', style({ opacity: 1, transform: 'translateY(0)' })),\r\n      transition('* => fromTop', [\r\n        style({ opacity: 0, transform: 'translateY(-5%)' }),\r\n        animate('400ms ease-in-out')\r\n      ]),\r\n      state('fromTopOut', style({ opacity: 0, transform: 'translateY(5%)' })),\r\n      transition('fromTop => fromTopOut', [\r\n        style({ opacity: 1, transform: 'translateY(0)' }),\r\n        animate('300ms ease-in-out')\r\n      ]),\r\n\r\n      // Enter from right\r\n      state('fromRight', style({ opacity: 1, transform: 'translateX(0)' })),\r\n      transition('* => fromRight', [\r\n        style({ opacity: 0, transform: 'translateX(5%)' }),\r\n        animate('400ms ease-in-out')\r\n      ]),\r\n      state('fromRightOut', style({ opacity: 0, transform: 'translateX(-5%)' })),\r\n      transition('fromRight => fromRightOut', [\r\n        style({ opacity: 1, transform: 'translateX(0)' }),\r\n        animate('300ms ease-in-out')\r\n      ]),\r\n\r\n      // Enter from bottom\r\n      state('fromBottom', style({ opacity: 1, transform: 'translateY(0)' })),\r\n      transition('* => fromBottom', [\r\n        style({ opacity: 0, transform: 'translateY(5%)' }),\r\n        animate('400ms ease-in-out')\r\n      ]),\r\n      state('fromBottomOut', style({ opacity: 0, transform: 'translateY(-5%)' })),\r\n      transition('fromBottom => fromBottomOut', [\r\n        style({ opacity: 1, transform: 'translateY(0)' }),\r\n        animate('300ms ease-in-out')\r\n      ]),\r\n\r\n      // Enter from left\r\n      state('fromLeft', style({ opacity: 1, transform: 'translateX(0)' })),\r\n      transition('* => fromLeft', [\r\n        style({ opacity: 0, transform: 'translateX(-5%)' }),\r\n        animate('400ms ease-in-out')\r\n      ]),\r\n      state('fromLeftOut', style({ opacity: 0, transform: 'translateX(5%)' })),\r\n      transition('fromLeft => fromLeftOut', [\r\n        style({ opacity: 1, transform: 'translateX(0)' }),\r\n        animate('300ms ease-in-out')\r\n      ])\r\n    ])\r\n  ],\r\n  templateUrl: './base-notification.component.html',\r\n  styleUrls: ['./base-notification.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class BaseNotificationComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() position: number;\r\n  @Input() maxLength: number;\r\n  @Input() animate: NotificationAnimationType;\r\n  @Input() item: Notification;\r\n\r\n  closeIcons = DEFAULT_ICONS.close\r\n  title: string | SafeHtml;\r\n  content: string | SafeHtml;\r\n\r\n  constructor(\r\n    private notificationService: NotificationCenterService,\r\n    private domSanitizer: DomSanitizer,\r\n    private cd: ChangeDetectorRef\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.animate) {\r\n      this.item.state = this.animate;\r\n    }\r\n\r\n    this.initNotificationContent(this.item.title, 'title');\r\n    this.initNotificationContent(this.item.content, 'content');\r\n\r\n    if (this.item.type === NotificationType.success) {\r\n      const timeout = 5000;\r\n      setTimeout(() => {\r\n        this.remove();\r\n      }, timeout);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cd.detach();\r\n  }\r\n\r\n  onClose(): void {\r\n    this.remove();\r\n  }\r\n\r\n  private remove(): void {\r\n    if (this.animate) {\r\n      this.item.state = this.animate + 'Out';\r\n      const timeout = 310;\r\n      setTimeout(() => {\r\n        this.notificationService.remove(this.item.id);\r\n      }, timeout);\r\n    } else {\r\n      this.notificationService.remove(this.item.id);\r\n    }\r\n  }\r\n\r\n  private initNotificationContent(item: string | SafeHtml, key: string): void {\r\n    switch (key) {\r\n      case 'title':\r\n        if (typeof item === 'string') {\r\n          this.title = item\r\n        } else {\r\n          this.title = item;\r\n        }\r\n        break;\r\n      case 'content':\r\n        if (typeof item === 'string') {\r\n          this.content = item\r\n        } else {\r\n          this.title = item;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}