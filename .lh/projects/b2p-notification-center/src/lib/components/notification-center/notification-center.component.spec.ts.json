{
    "sourceFile": "projects/b2p-notification-center/src/lib/components/notification-center/notification-center.component.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1681112425856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681112551261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n           deps: [OPTIONS]\r\n         },\r\n         MockProvider(DomSanitizer, {\r\n           sanitize: jasmine.createSpy('sanitize'),\r\n+          bypassSecurityTrustHtml: jasmine.createSpy('bypassSecurityTrustHtml'),\r\n         })],\r\n     })\r\n       .compileComponents();\r\n   }));\r\n"
                },
                {
                    "date": 1681112598627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,8 @@\n import { Notification } from '../../types/notification.type';\r\n import { NotificationType } from '../../types/notification-type.enum';\r\n import { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\n import { Color } from '../../types/color.type';\r\n-import { MockProvider } from 'ng-mocks';\r\n-import { DomSanitizer } from '@angular/platform-browser';\r\n \r\n describe('NotificationCenterComponent', () => {\r\n   let component: NotificationCenterComponent;\r\n   let fixture: ComponentFixture<NotificationCenterComponent>;\r\n@@ -36,13 +34,9 @@\n         }, {\r\n           provide: 'options',\r\n           useFactory: optionsFactory,\r\n           deps: [OPTIONS]\r\n-        },\r\n-        MockProvider(DomSanitizer, {\r\n-          sanitize: jasmine.createSpy('sanitize'),\r\n-          bypassSecurityTrustHtml: jasmine.createSpy('bypassSecurityTrustHtml'),\r\n-        })],\r\n+        }],\r\n     })\r\n       .compileComponents();\r\n   }));\r\n \r\n"
                },
                {
                    "date": 1681112748608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { Notification } from '../../types/notification.type';\r\n import { NotificationType } from '../../types/notification-type.enum';\r\n import { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\n import { Color } from '../../types/color.type';\r\n+import { DomSanitizer } from '@angular/platform-browser';\r\n \r\n describe('NotificationCenterComponent', () => {\r\n   let component: NotificationCenterComponent;\r\n   let fixture: ComponentFixture<NotificationCenterComponent>;\r\n@@ -34,8 +35,15 @@\n         }, {\r\n           provide: 'options',\r\n           useFactory: optionsFactory,\r\n           deps: [OPTIONS]\r\n+        },\r\n+        {\r\n+          provide: DomSanitizer,\r\n+          useValue: {\r\n+            sanitize: (ctx: any, val: string) => val,\r\n+            bypassSecurityTrustResourceUrl: (val: string) => val,\r\n+          },\r\n         }],\r\n     })\r\n       .compileComponents();\r\n   }));\r\n"
                },
                {
                    "date": 1681112780680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n           provide: DomSanitizer,\r\n           useValue: {\r\n             sanitize: (ctx: any, val: string) => val,\r\n             bypassSecurityTrustResourceUrl: (val: string) => val,\r\n+            bypassSecurityTrustHtml: (val: string) => val,\r\n           },\r\n         }],\r\n     })\r\n       .compileComponents();\r\n"
                },
                {
                    "date": 1681112979737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { Notification } from '../../types/notification.type';\r\n import { NotificationType } from '../../types/notification-type.enum';\r\n import { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\n import { Color } from '../../types/color.type';\r\n-import { DomSanitizer } from '@angular/platform-browser';\r\n+import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n \r\n describe('NotificationCenterComponent', () => {\r\n   let component: NotificationCenterComponent;\r\n   let fixture: ComponentFixture<NotificationCenterComponent>;\r\n@@ -36,16 +36,10 @@\n           provide: 'options',\r\n           useFactory: optionsFactory,\r\n           deps: [OPTIONS]\r\n         },\r\n-        {\r\n-          provide: DomSanitizer,\r\n-          useValue: {\r\n-            sanitize: (ctx: any, val: string) => val,\r\n-            bypassSecurityTrustResourceUrl: (val: string) => val,\r\n-            bypassSecurityTrustHtml: (val: string) => val,\r\n-          },\r\n-        }],\r\n+        { provide: DomSanitizer, useClass: TestDomSanitizer, deps: [] },\r\n+      ],\r\n     })\r\n       .compileComponents();\r\n   }));\r\n \r\n@@ -138,4 +132,17 @@\n       expect(notification.isMinimized).toBeFalsy();\r\n     }\r\n   });\r\n });\r\n+\r\n+class TestDomSanitizer {\r\n+  bypassSecurityTrustHtml = jasmine.createSpy('bypassSecurityTrustHtml')\r\n+    .and.callFake((html: string) => ({\r\n+      changingThisBreaksApplicationSecurity: html,\r\n+      getTypeName: () => 'HTML',\r\n+    } as TestSafeHtml));\r\n+}\r\n+\r\n+interface TestSafeHtml extends SafeHtml {\r\n+  changingThisBreaksApplicationSecurity: string;\r\n+  getTypeName: () => string;\r\n+}\r\n"
                },
                {
                    "date": 1681113147261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import { NotificationType } from '../../types/notification-type.enum';\r\n import { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\n import { Color } from '../../types/color.type';\r\n import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n+import { Sanitizer, SecurityContext } from '@angular/core';\r\n \r\n describe('NotificationCenterComponent', () => {\r\n   let component: NotificationCenterComponent;\r\n   let fixture: ComponentFixture<NotificationCenterComponent>;\r\n@@ -45,8 +46,9 @@\n \r\n   beforeEach(() => {\r\n     fixture = TestBed.createComponent(NotificationCenterComponent);\r\n     component = fixture.componentInstance;\r\n+    component.domSanitizer = new TestDomSanitizer();\r\n     fixture.detectChanges();\r\n   });\r\n \r\n   it('should create', () => {\r\n@@ -133,9 +135,12 @@\n     }\r\n   });\r\n });\r\n \r\n-class TestDomSanitizer {\r\n+class TestDomSanitizer extends Sanitizer {\r\n+  sanitize(context: SecurityContext, value: string | {}): string {\r\n+    throw new Error('Method not implemented.');\r\n+  }\r\n   bypassSecurityTrustHtml = jasmine.createSpy('bypassSecurityTrustHtml')\r\n     .and.callFake((html: string) => ({\r\n       changingThisBreaksApplicationSecurity: html,\r\n       getTypeName: () => 'HTML',\r\n"
                },
                {
                    "date": 1681113402763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,9 @@\n import { Notification } from '../../types/notification.type';\r\n import { NotificationType } from '../../types/notification-type.enum';\r\n import { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\n import { Color } from '../../types/color.type';\r\n-import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n-import { Sanitizer, SecurityContext } from '@angular/core';\r\n+import { DomSanitizer } from '@angular/platform-browser';\r\n \r\n describe('NotificationCenterComponent', () => {\r\n   let component: NotificationCenterComponent;\r\n   let fixture: ComponentFixture<NotificationCenterComponent>;\r\n@@ -37,18 +36,22 @@\n           provide: 'options',\r\n           useFactory: optionsFactory,\r\n           deps: [OPTIONS]\r\n         },\r\n-        { provide: DomSanitizer, useClass: TestDomSanitizer, deps: [] },\r\n+        {\r\n+          provide: DomSanitizer,\r\n+          useValue: {\r\n+            bypassSecurityTrustHtml: () => 'safeString'\r\n+          }\r\n+        },\r\n       ],\r\n     })\r\n       .compileComponents();\r\n   }));\r\n \r\n   beforeEach(() => {\r\n     fixture = TestBed.createComponent(NotificationCenterComponent);\r\n     component = fixture.componentInstance;\r\n-    component.domSanitizer = new TestDomSanitizer();\r\n     fixture.detectChanges();\r\n   });\r\n \r\n   it('should create', () => {\r\n@@ -133,21 +136,5 @@\n       expect(notification.type).toBe(NotificationType.info);\r\n       expect(notification.isMinimized).toBeFalsy();\r\n     }\r\n   });\r\n-});\r\n-\r\n-class TestDomSanitizer extends Sanitizer {\r\n-  sanitize(context: SecurityContext, value: string | {}): string {\r\n-    throw new Error('Method not implemented.');\r\n-  }\r\n-  bypassSecurityTrustHtml = jasmine.createSpy('bypassSecurityTrustHtml')\r\n-    .and.callFake((html: string) => ({\r\n-      changingThisBreaksApplicationSecurity: html,\r\n-      getTypeName: () => 'HTML',\r\n-    } as TestSafeHtml));\r\n-}\r\n-\r\n-interface TestSafeHtml extends SafeHtml {\r\n-  changingThisBreaksApplicationSecurity: string;\r\n-  getTypeName: () => string;\r\n-}\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681113422982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n         },\r\n         {\r\n           provide: DomSanitizer,\r\n           useValue: {\r\n-            bypassSecurityTrustHtml: () => 'safeString'\r\n+            bypassSecurityTrustHtml: (value: string) => 'safeString'\r\n           }\r\n         },\r\n       ],\r\n     })\r\n"
                },
                {
                    "date": 1681113491916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';\r\n import { NotificationCenterComponent } from './notification-center.component';\r\n import { StubBaseNotificationComponent } from '../base-notification/base-notification.component.stub';\r\n import { NotificationCenterService } from '../../notification-center.service';\r\n-import { OPTIONS, optionsFactory } from '../../notification-center.module';\r\n import { Notification } from '../../types/notification.type';\r\n import { NotificationType } from '../../types/notification-type.enum';\r\n import { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\n import { Color } from '../../types/color.type';\r\n@@ -28,17 +27,10 @@\n     TestBed.configureTestingModule({\r\n       imports: [],\r\n       declarations: [StubBaseNotificationComponent, NotificationCenterComponent],\r\n       providers: [NotificationCenterService,\r\n+\r\n         {\r\n-          provide: OPTIONS,\r\n-          useValue: {}\r\n-        }, {\r\n-          provide: 'options',\r\n-          useFactory: optionsFactory,\r\n-          deps: [OPTIONS]\r\n-        },\r\n-        {\r\n           provide: DomSanitizer,\r\n           useValue: {\r\n             bypassSecurityTrustHtml: (value: string) => 'safeString'\r\n           }\r\n"
                },
                {
                    "date": 1681113532228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';\r\n import { NotificationCenterComponent } from './notification-center.component';\r\n import { StubBaseNotificationComponent } from '../base-notification/base-notification.component.stub';\r\n import { NotificationCenterService } from '../../notification-center.service';\r\n+import { OPTIONS, optionsFactory } from '../../notification-center.module';\r\n import { Notification } from '../../types/notification.type';\r\n import { NotificationType } from '../../types/notification-type.enum';\r\n import { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\n import { Color } from '../../types/color.type';\r\n@@ -27,10 +28,17 @@\n     TestBed.configureTestingModule({\r\n       imports: [],\r\n       declarations: [StubBaseNotificationComponent, NotificationCenterComponent],\r\n       providers: [NotificationCenterService,\r\n-\r\n         {\r\n+          provide: OPTIONS,\r\n+          useValue: {}\r\n+        }, {\r\n+          provide: 'options',\r\n+          useFactory: optionsFactory,\r\n+          deps: [OPTIONS]\r\n+        },\r\n+        {\r\n           provide: DomSanitizer,\r\n           useValue: {\r\n             bypassSecurityTrustHtml: (value: string) => 'safeString'\r\n           }\r\n"
                },
                {
                    "date": 1681113574773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,11 @@\n         },\r\n         {\r\n           provide: DomSanitizer,\r\n           useValue: {\r\n-            bypassSecurityTrustHtml: (value: string) => 'safeString'\r\n-          }\r\n+            sanitize: (ctx: any, val: string) => val,\r\n+            bypassSecurityTrustResourceUrl: (val: string) => val,\r\n+          },\r\n         },\r\n       ],\r\n     })\r\n       .compileComponents();\r\n"
                },
                {
                    "date": 1681113671408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,15 +36,9 @@\n           provide: 'options',\r\n           useFactory: optionsFactory,\r\n           deps: [OPTIONS]\r\n         },\r\n-        {\r\n-          provide: DomSanitizer,\r\n-          useValue: {\r\n-            sanitize: (ctx: any, val: string) => val,\r\n-            bypassSecurityTrustResourceUrl: (val: string) => val,\r\n-          },\r\n-        },\r\n+        DomSanitizer,\r\n       ],\r\n     })\r\n       .compileComponents();\r\n   }));\r\n"
                },
                {
                    "date": 1681113792916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,18 +27,17 @@\n   beforeEach(waitForAsync(() => {\r\n     TestBed.configureTestingModule({\r\n       imports: [],\r\n       declarations: [StubBaseNotificationComponent, NotificationCenterComponent],\r\n-      providers: [NotificationCenterService,\r\n+      providers: [NotificationCenterService, DomSanitizer,\r\n         {\r\n           provide: OPTIONS,\r\n           useValue: {}\r\n         }, {\r\n           provide: 'options',\r\n           useFactory: optionsFactory,\r\n           deps: [OPTIONS]\r\n         },\r\n-        DomSanitizer,\r\n       ],\r\n     })\r\n       .compileComponents();\r\n   }));\r\n"
                },
                {
                    "date": 1681113948218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   beforeEach(waitForAsync(() => {\r\n     TestBed.configureTestingModule({\r\n       imports: [],\r\n       declarations: [StubBaseNotificationComponent, NotificationCenterComponent],\r\n-      providers: [NotificationCenterService, DomSanitizer,\r\n+      providers: [NotificationCenterService,\r\n         {\r\n           provide: OPTIONS,\r\n           useValue: {}\r\n         }, {\r\n@@ -45,8 +45,9 @@\n   beforeEach(() => {\r\n     fixture = TestBed.createComponent(NotificationCenterComponent);\r\n     component = fixture.componentInstance;\r\n     fixture.detectChanges();\r\n+    TestBed.inject(DomSanitizer);\r\n   });\r\n \r\n   it('should create', () => {\r\n     expect(component).toBeTruthy();\r\n"
                },
                {
                    "date": 1681114036476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n     createdOn: new Date(),\r\n     destroyedOn: new Date()\r\n   };\r\n \r\n+  const spy = jasmine.createSpyObj('DomSanitizer', ['bypassSecurityTrustHtml']);\r\n   beforeEach(waitForAsync(() => {\r\n     TestBed.configureTestingModule({\r\n       imports: [],\r\n       declarations: [StubBaseNotificationComponent, NotificationCenterComponent],\r\n@@ -36,8 +37,9 @@\n           provide: 'options',\r\n           useFactory: optionsFactory,\r\n           deps: [OPTIONS]\r\n         },\r\n+        { provide: DomSanitizer, useValue: spy }\r\n       ],\r\n     })\r\n       .compileComponents();\r\n   }));\r\n@@ -45,9 +47,8 @@\n   beforeEach(() => {\r\n     fixture = TestBed.createComponent(NotificationCenterComponent);\r\n     component = fixture.componentInstance;\r\n     fixture.detectChanges();\r\n-    TestBed.inject(DomSanitizer);\r\n   });\r\n \r\n   it('should create', () => {\r\n     expect(component).toBeTruthy();\r\n"
                },
                {
                    "date": 1681114288812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';\r\n+import { waitForAsync, ComponentFixture, TestBed, getTestBed } from '@angular/core/testing';\r\n import { NotificationCenterComponent } from './notification-center.component';\r\n import { StubBaseNotificationComponent } from '../base-notification/base-notification.component.stub';\r\n import { NotificationCenterService } from '../../notification-center.service';\r\n import { OPTIONS, optionsFactory } from '../../notification-center.module';\r\n@@ -36,13 +36,15 @@\n         }, {\r\n           provide: 'options',\r\n           useFactory: optionsFactory,\r\n           deps: [OPTIONS]\r\n-        },\r\n-        { provide: DomSanitizer, useValue: spy }\r\n+        }\r\n       ],\r\n     })\r\n       .compileComponents();\r\n+\r\n+    let injector = getTestBed();\r\n+    injector.inject(DomSanitizer);\r\n   }));\r\n \r\n   beforeEach(() => {\r\n     fixture = TestBed.createComponent(NotificationCenterComponent);\r\n"
                },
                {
                    "date": 1681115334732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,13 @@\n-import { waitForAsync, ComponentFixture, TestBed, getTestBed } from '@angular/core/testing';\r\n+import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';\r\n import { NotificationCenterComponent } from './notification-center.component';\r\n import { StubBaseNotificationComponent } from '../base-notification/base-notification.component.stub';\r\n import { NotificationCenterService } from '../../notification-center.service';\r\n import { OPTIONS, optionsFactory } from '../../notification-center.module';\r\n import { Notification } from '../../types/notification.type';\r\n import { NotificationType } from '../../types/notification-type.enum';\r\n import { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\n import { Color } from '../../types/color.type';\r\n-import { DomSanitizer } from '@angular/platform-browser';\r\n \r\n describe('NotificationCenterComponent', () => {\r\n   let component: NotificationCenterComponent;\r\n   let fixture: ComponentFixture<NotificationCenterComponent>;\r\n@@ -23,9 +22,8 @@\n     createdOn: new Date(),\r\n     destroyedOn: new Date()\r\n   };\r\n \r\n-  const spy = jasmine.createSpyObj('DomSanitizer', ['bypassSecurityTrustHtml']);\r\n   beforeEach(waitForAsync(() => {\r\n     TestBed.configureTestingModule({\r\n       imports: [],\r\n       declarations: [StubBaseNotificationComponent, NotificationCenterComponent],\r\n@@ -40,11 +38,8 @@\n         }\r\n       ],\r\n     })\r\n       .compileComponents();\r\n-\r\n-    let injector = getTestBed();\r\n-    injector.inject(DomSanitizer);\r\n   }));\r\n \r\n   beforeEach(() => {\r\n     fixture = TestBed.createComponent(NotificationCenterComponent);\r\n"
                },
                {
                    "date": 1681115374489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,5 +129,5 @@\n       expect(notification.type).toBe(NotificationType.info);\r\n       expect(notification.isMinimized).toBeFalsy();\r\n     }\r\n   });\r\n-});\n\\ No newline at end of file\n+});\r\n"
                }
            ],
            "date": 1681112425856,
            "name": "Commit-0",
            "content": "import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { NotificationCenterComponent } from './notification-center.component';\r\nimport { StubBaseNotificationComponent } from '../base-notification/base-notification.component.stub';\r\nimport { NotificationCenterService } from '../../notification-center.service';\r\nimport { OPTIONS, optionsFactory } from '../../notification-center.module';\r\nimport { Notification } from '../../types/notification.type';\r\nimport { NotificationType } from '../../types/notification-type.enum';\r\nimport { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\nimport { Color } from '../../types/color.type';\r\nimport { MockProvider } from 'ng-mocks';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ndescribe('NotificationCenterComponent', () => {\r\n  let component: NotificationCenterComponent;\r\n  let fixture: ComponentFixture<NotificationCenterComponent>;\r\n\r\n  const defaultNotification: Notification = {\r\n    id: '0',\r\n    title: 'Test title',\r\n    type: NotificationType.info,\r\n    content: 'Test Content',\r\n    maxLength: 0,\r\n    animate: NotificationAnimationType.fromTop,\r\n    createdOn: new Date(),\r\n    destroyedOn: new Date()\r\n  };\r\n\r\n  beforeEach(waitForAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [],\r\n      declarations: [StubBaseNotificationComponent, NotificationCenterComponent],\r\n      providers: [NotificationCenterService,\r\n        {\r\n          provide: OPTIONS,\r\n          useValue: {}\r\n        }, {\r\n          provide: 'options',\r\n          useFactory: optionsFactory,\r\n          deps: [OPTIONS]\r\n        },\r\n        MockProvider(DomSanitizer, {\r\n          sanitize: jasmine.createSpy('sanitize'),\r\n        })],\r\n    })\r\n      .compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(NotificationCenterComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should add notification', () => {\r\n    component.add(defaultNotification);\r\n    fixture.detectChanges();\r\n    expect(component.notifications.length).toBeGreaterThan(0);\r\n  });\r\n\r\n  it('should have touched notification', () => {\r\n    defaultNotification.isTouched = true;\r\n    component.add(defaultNotification);\r\n    fixture.detectChanges();\r\n    expect(component.hasTouchedNotifications(NotificationType.info)).toBeTruthy();\r\n  });\r\n\r\n  it('should have minimized notification', () => {\r\n    component.add(defaultNotification);\r\n    fixture.detectChanges();\r\n    component.onMinimize();\r\n    fixture.detectChanges();\r\n    expect(component.hasMinimizedNotifications(NotificationType.info)).toBeTruthy();\r\n  });\r\n\r\n  it('should have minimize icon colored with info color', () => {\r\n    component.add(defaultNotification);\r\n    component.add({\r\n      id: '0',\r\n      title: 'Test title',\r\n      type: NotificationType.info,\r\n      content: 'Test Content'\r\n    });\r\n    fixture.detectChanges();\r\n    expect(component.getMinimizeButtonColor()).toBe(Color.info);\r\n  });\r\n\r\n  it('should have minimize icon colored with black color', () => {\r\n    component.add(defaultNotification);\r\n    component.add({\r\n      id: '0',\r\n      title: 'Test title',\r\n      type: NotificationType.warning,\r\n      content: 'Test Content'\r\n    });\r\n    component.add({\r\n      id: '0',\r\n      title: 'Test title',\r\n      type: NotificationType.error,\r\n      content: 'Test Content'\r\n    });\r\n    fixture.detectChanges();\r\n    expect(component.getMinimizeButtonColor()).toBe('black');\r\n  });\r\n\r\n  it('should have info type notification visible', () => {\r\n    component.add(defaultNotification);\r\n    component.add({\r\n      id: '0',\r\n      title: 'Test title',\r\n      type: NotificationType.warning,\r\n      content: 'Test Content',\r\n      isMinimized: true,\r\n      isTouched: true\r\n    });\r\n    component.add({\r\n      id: '0',\r\n      title: 'Test title',\r\n      type: NotificationType.error,\r\n      content: 'Test Content',\r\n      isMinimized: true,\r\n      isTouched: true\r\n    });\r\n    fixture.detectChanges();\r\n    component.onMinimize();\r\n    fixture.detectChanges();\r\n    component.onToggleNotification(NotificationType.info);\r\n\r\n    for (const notification of component.getNotificationToShow()) {\r\n      expect(notification.type).toBe(NotificationType.info);\r\n      expect(notification.isMinimized).toBeFalsy();\r\n    }\r\n  });\r\n});\r\n"
        }
    ]
}