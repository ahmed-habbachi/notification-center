{
    "sourceFile": "projects/b2p-notification-center/src/lib/components/notification-center/notification-center.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1681112429189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681113044111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n   private usingComponentOptions = false;\r\n \r\n   constructor(\r\n     private service: NotificationCenterService,\r\n-    private domSanitizer: DomSanitizer,\r\n+    public domSanitizer: DomSanitizer,\r\n     private cd: ChangeDetectorRef\r\n   ) { }\r\n \r\n   @Input() set options(opt: NotificationOptions) {\r\n"
                },
                {
                    "date": 1681113086216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n   styleUrls: ['./notification-center.component.scss'],\r\n   changeDetection: ChangeDetectionStrategy.OnPush\r\n })\r\n export class NotificationCenterComponent implements OnInit, OnDestroy {\r\n+  [x: string]: TestDomSanitizer;\r\n \r\n   @Output() create = new EventEmitter();\r\n   @Output() destroy = new EventEmitter();\r\n \r\n"
                },
                {
                    "date": 1681113091437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,8 @@\n   styleUrls: ['./notification-center.component.scss'],\r\n   changeDetection: ChangeDetectionStrategy.OnPush\r\n })\r\n export class NotificationCenterComponent implements OnInit, OnDestroy {\r\n-  [x: string]: TestDomSanitizer;\r\n-\r\n   @Output() create = new EventEmitter();\r\n   @Output() destroy = new EventEmitter();\r\n \r\n   // errorIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.error);\r\n"
                },
                {
                    "date": 1681113700477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,13 @@\n   private usingComponentOptions = false;\r\n \r\n   constructor(\r\n     private service: NotificationCenterService,\r\n-    public domSanitizer: DomSanitizer,\r\n+    private domSanitizer: DomSanitizer,\r\n     private cd: ChangeDetectorRef\r\n-  ) { }\r\n+  ) {\r\n+    console.log('ak', domSanitizer);\r\n+  }\r\n \r\n   @Input() set options(opt: NotificationOptions) {\r\n     this.usingComponentOptions = true;\r\n     this.attachChanges(opt);\r\n"
                },
                {
                    "date": 1681114975928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,8 @@\n     private service: NotificationCenterService,\r\n     private domSanitizer: DomSanitizer,\r\n     private cd: ChangeDetectorRef\r\n   ) {\r\n-    console.log('ak', domSanitizer);\r\n   }\r\n \r\n   @Input() set options(opt: NotificationOptions) {\r\n     this.usingComponentOptions = true;\r\n"
                },
                {
                    "date": 1681114997299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n       } else if (showntypes[0] === NotificationType.error) {\r\n         upIconColor = Color.danger;\r\n       }\r\n     }\r\n-    return this.domSanitizer.bypassSecurityTrustHtml(getIcon('up', this.getColorInHex(upIconColor)));\r\n+    return getIcon('up', this.getColorInHex(upIconColor));\r\n   }\r\n \r\n   getColorInHex(colorName: string): string {\r\n     switch (colorName) {\r\n"
                },
                {
                    "date": 1681115014923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \r\n   // errorIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.error);\r\n   // warningIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.warning);\r\n   // infoIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.info);\r\n-  upIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.up);\r\n+  upIcons = DEFAULT_ICONS.up\r\n   notificationType = NotificationType;\r\n   notifications: Array<Notification> = [];\r\n   position: Position = ['bottom', 'right'];\r\n   maxLength = 0;\r\n"
                },
                {
                    "date": 1681115196382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \r\n   // errorIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.error);\r\n   // warningIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.warning);\r\n   // infoIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.info);\r\n-  upIcons = DEFAULT_ICONS.up\r\n+  upIcons: SafeHtml;\r\n   notificationType = NotificationType;\r\n   notifications: Array<Notification> = [];\r\n   position: Position = ['bottom', 'right'];\r\n   maxLength = 0;\r\n@@ -79,8 +79,9 @@\n     private service: NotificationCenterService,\r\n     private domSanitizer: DomSanitizer,\r\n     private cd: ChangeDetectorRef\r\n   ) {\r\n+    this.upIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.up);\r\n   }\r\n \r\n   @Input() set options(opt: NotificationOptions) {\r\n     this.usingComponentOptions = true;\r\n@@ -310,9 +311,9 @@\n       } else if (showntypes[0] === NotificationType.error) {\r\n         upIconColor = Color.danger;\r\n       }\r\n     }\r\n-    return getIcon('up', this.getColorInHex(upIconColor));\r\n+    return this.domSanitizer.bypassSecurityTrustHtml(getIcon('up', this.getColorInHex(upIconColor)));\r\n   }\r\n \r\n   getColorInHex(colorName: string): string {\r\n     switch (colorName) {\r\n"
                }
            ],
            "date": 1681112429189,
            "name": "Commit-0",
            "content": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  ViewRef\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { NotificationAnimationType } from '../../types/notification-animation-type.enum';\r\nimport { Notification } from '../../types/notification.type';\r\nimport { NotificationOptions, Position } from '../../types/notification-options.type';\r\nimport { NotificationCenterService } from '../../notification-center.service';\r\nimport { NotificationType } from '../../types/notification-type.enum';\r\nimport { NotificationEvent } from '../../types/notification-event.type';\r\nimport { Color } from '../../types/color.type';\r\nimport { DEFAULT_ICONS, getIcon } from '../../constants/default-icons.const';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { UiButtonConfig, UI_BUTTON_ICON_STYLE, UI_BUTTON_STYLES, UI_BUTTON_VARIANTS } from '../button/button.component';\r\n\r\n@Component({\r\n  selector: 'b2p-notification-center',\r\n  encapsulation: ViewEncapsulation.None,\r\n  templateUrl: './notification-center.component.html',\r\n  styleUrls: ['./notification-center.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NotificationCenterComponent implements OnInit, OnDestroy {\r\n\r\n  @Output() create = new EventEmitter();\r\n  @Output() destroy = new EventEmitter();\r\n\r\n  // errorIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.error);\r\n  // warningIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.warning);\r\n  // infoIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.info);\r\n  upIcons = this.domSanitizer.bypassSecurityTrustHtml(DEFAULT_ICONS.up);\r\n  notificationType = NotificationType;\r\n  notifications: Array<Notification> = [];\r\n  position: Position = ['bottom', 'right'];\r\n  maxLength = 0;\r\n  animate: NotificationAnimationType = NotificationAnimationType.fromRight;\r\n\r\n  errorButtonConfig: UiButtonConfig = {\r\n    buttonVariant: UI_BUTTON_VARIANTS.TOGGLE,\r\n    buttonStyle: UI_BUTTON_STYLES.SOLID,\r\n    buttonTheme: Color.danger,\r\n    iconSVG: getIcon('error', '#ffffff'),\r\n    iconSVGActive: getIcon('error', this.getColorInHex(Color.danger)),\r\n    iconStyle: UI_BUTTON_ICON_STYLE.REGULAR,\r\n  };\r\n\r\n  warningButtonConfig: UiButtonConfig = {\r\n    buttonVariant: UI_BUTTON_VARIANTS.TOGGLE,\r\n    buttonStyle: UI_BUTTON_STYLES.SOLID,\r\n    buttonTheme: Color.warning,\r\n    iconSVG: getIcon('warning', '#ffffff'),\r\n    iconSVGActive: getIcon('warning', this.getColorInHex(Color.warning)),\r\n    iconStyle: UI_BUTTON_ICON_STYLE.REGULAR,\r\n  };\r\n\r\n  infoButtonConfig: UiButtonConfig = {\r\n    buttonVariant: UI_BUTTON_VARIANTS.TOGGLE,\r\n    buttonStyle: UI_BUTTON_STYLES.SOLID,\r\n    buttonTheme: Color.info,\r\n    iconSVG: getIcon('info', '#ffffff'),\r\n    iconSVGActive: getIcon('info', this.getColorInHex(Color.info)),\r\n    iconStyle: UI_BUTTON_ICON_STYLE.REGULAR,\r\n  };\r\n\r\n  private listener: Subscription;\r\n  private lastOnBottom = true;\r\n  private maxStack = 8;\r\n  private usingComponentOptions = false;\r\n\r\n  constructor(\r\n    private service: NotificationCenterService,\r\n    private domSanitizer: DomSanitizer,\r\n    private cd: ChangeDetectorRef\r\n  ) { }\r\n\r\n  @Input() set options(opt: NotificationOptions) {\r\n    this.usingComponentOptions = true;\r\n    this.attachChanges(opt);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.usingComponentOptions) {\r\n      this.attachChanges(\r\n        this.service.globalOptions\r\n      );\r\n    }\r\n\r\n    this.listener = this.service.emitter\r\n      .subscribe(item => {\r\n        switch (item.command) {\r\n          case 'cleanAll':\r\n            this.notifications = [];\r\n            break;\r\n\r\n          case 'clean':\r\n            this.cleanSingle(item.id);\r\n            break;\r\n\r\n          case 'set':\r\n            if (item.add) {\r\n              this.add(item.notification);\r\n            } else {\r\n              this.defaultBehavior(item);\r\n            }\r\n            break;\r\n\r\n          default:\r\n            this.defaultBehavior(item);\r\n            break;\r\n        }\r\n        if (!(this.cd as ViewRef).destroyed) {\r\n          this.cd.detectChanges();\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.listener) {\r\n      this.listener.unsubscribe();\r\n    }\r\n    this.cd.detach();\r\n  }\r\n\r\n  defaultBehavior(value: NotificationEvent): void {\r\n    this.notifications.splice(this.notifications.indexOf(value.notification), 1);\r\n    this.destroy.emit(this.buildEmit(value.notification, false));\r\n  }\r\n\r\n  add(item: Notification): void {\r\n    if (!item) {\r\n      return;\r\n    }\r\n\r\n    item.createdOn = new Date();\r\n\r\n    if (this.lastOnBottom) {\r\n      if (this.notifications.length >= this.maxStack) {\r\n        this.notifications.splice(0, 1);\r\n      }\r\n\r\n      this.notifications.push(item);\r\n    } else {\r\n      if (this.notifications.length >= this.maxStack) {\r\n        this.notifications.splice(this.notifications.length - 1, 1);\r\n      }\r\n\r\n      this.notifications.splice(0, 0, item);\r\n    }\r\n\r\n    this.create.emit(this.buildEmit(item, true));\r\n  }\r\n\r\n  checkStandard(checker: Notification, item: Notification): boolean {\r\n    return checker.type === item.type\r\n      && checker.title === item.title\r\n      && checker.content === item.content;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  attachChanges(options: any): void {\r\n    for (const key in options) {\r\n      if (this.hasOwnProperty(key)) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        (this as any)[key] = options[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  buildEmit(notification: Notification, to: boolean): Notification {\r\n    const toEmit: Notification = {\r\n      createdOn: notification.createdOn,\r\n      type: notification.type,\r\n      id: notification.id\r\n    };\r\n\r\n    toEmit.title = notification.title;\r\n    toEmit.content = notification.content;\r\n\r\n    if (!to) {\r\n      toEmit.destroyedOn = new Date();\r\n    }\r\n\r\n    return toEmit;\r\n  }\r\n\r\n  cleanSingle(id: string): void {\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    let indexOfDelete = 0;\r\n    let doDelete = false;\r\n    let noti: Notification;\r\n\r\n    this.notifications.forEach((notification, idx) => {\r\n      if (notification.id === id) {\r\n        indexOfDelete = idx;\r\n        noti = notification;\r\n        doDelete = true;\r\n      }\r\n    });\r\n\r\n    if (doDelete) {\r\n      this.notifications.splice(indexOfDelete, 1);\r\n      this.destroy.emit(this.buildEmit(noti, false));\r\n    }\r\n  }\r\n\r\n  hasTouchedNotifications(notificationType: NotificationType): boolean {\r\n    return this.notifications.some(notif => notif.type === notificationType && notif.isTouched);\r\n  }\r\n\r\n  hasMinimizedNotifications(notificationType: NotificationType): boolean {\r\n    return this.notifications.some(notif => notif.type === notificationType && notif.isMinimized);\r\n  }\r\n\r\n  onMinimize(): void {\r\n    this.notifications.forEach(notif => {\r\n      if (notif.type !== NotificationType.success) {\r\n        notif.isMinimized = true;\r\n        notif.isTouched = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  onToggleNotification(notificationType: NotificationType): void {\r\n    if (this.getShownTypes().length > 1) {\r\n      this.notifications.forEach(notif => {\r\n        if (notif.type !== notificationType) {\r\n          notif.isMinimized = true;\r\n          notif.isTouched = true;\r\n        } else {\r\n          notif.isMinimized = false;\r\n        }\r\n      });\r\n    } else {\r\n      this.notifications.forEach(notif => {\r\n        if (notif.type === notificationType && this.hasMinimizedNotifications(notif.type)) {\r\n          notif.isMinimized = !notif.isMinimized;\r\n          if (notif.isMinimized) {\r\n            notif.isTouched = true;\r\n          }\r\n        } else {\r\n          notif.isMinimized = true;\r\n          notif.isTouched = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getNotificationToShow(): Array<Notification> {\r\n    return this.notifications.filter(notif => !notif.isMinimized);\r\n  }\r\n\r\n  getShownTypes(): Array<NotificationType> {\r\n    return this.notifications.filter(notif => !notif.isMinimized)\r\n      .map(notif => notif.type).filter((type, index, self) => self.indexOf(type) === index);\r\n  }\r\n\r\n  getMinimizeButtonColor(): Color {\r\n    const showntypes: Array<NotificationType> = this.getShownTypes();\r\n    if (showntypes.length === 2) {\r\n      const indexSucess: number = showntypes.indexOf(NotificationType.success);\r\n      if (indexSucess > -1) {\r\n        showntypes.splice(indexSucess, 1);\r\n      }\r\n    }\r\n\r\n    if (showntypes.length === 1) {\r\n      if (showntypes[0] === NotificationType.success) {\r\n        return Color.success;\r\n      } else if (showntypes[0] === NotificationType.info) {\r\n        return Color.info;\r\n      } else if (showntypes[0] === NotificationType.warning) {\r\n        return Color.warning;\r\n      } else if (showntypes[0] === NotificationType.error) {\r\n        return Color.danger;\r\n      }\r\n    }\r\n\r\n    return Color.black;\r\n  }\r\n\r\n  getMinimizeIcon(): SafeHtml {\r\n    let upIconColor: string = Color.black;\r\n    const showntypes: Array<NotificationType> = this.getShownTypes();\r\n    if (showntypes.length === 2) {\r\n      const indexSucess: number = showntypes.indexOf(NotificationType.success);\r\n      if (indexSucess > -1) {\r\n        showntypes.splice(indexSucess, 1);\r\n      }\r\n    }\r\n\r\n    if (showntypes.length === 1) {\r\n      if (showntypes[0] === NotificationType.success) {\r\n        upIconColor = Color.success;\r\n      } else if (showntypes[0] === NotificationType.info) {\r\n        upIconColor = Color.info;\r\n      } else if (showntypes[0] === NotificationType.warning) {\r\n        upIconColor = Color.warning;\r\n      } else if (showntypes[0] === NotificationType.error) {\r\n        upIconColor = Color.danger;\r\n      }\r\n    }\r\n    return this.domSanitizer.bypassSecurityTrustHtml(getIcon('up', this.getColorInHex(upIconColor)));\r\n  }\r\n\r\n  getColorInHex(colorName: string): string {\r\n    switch (colorName) {\r\n      case 'danger':\r\n        return '#CB0101';\r\n      case 'warning':\r\n        return '#FFD800';\r\n      case 'info':\r\n        return '#0FAEED';\r\n      case 'success':\r\n        return '#76dd55';\r\n      default:\r\n        return '#000000';\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}